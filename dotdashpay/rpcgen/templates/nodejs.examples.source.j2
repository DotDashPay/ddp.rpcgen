{# This macro avoids having to repeat code for the standalone extended example #}

{% macro render(is_example=True) -%}
{% if is_example %}
// @example-args({{service.name}}.{{method.name}})
{% endif %}
var args = {
  {% for field in (method.name | find_arguments_proto_by_method_name).field %}
  {% if field.name != "META" %}
  {{field.name | recase}}: {{field.name | get_example_value_for_field}},
  {% endif %}
  {% endfor %}
};
{% if is_example %}
// @example-args-end()
{% endif %}

// @test()
describe("{{service.name}}", function() {
  describe("{{method.name|lowercase_first_letter}}", function () {
    beforeEach(function () {
      dotdashpay._reset();
      dotdashpay.setup({simulate: true});
    });

    it("should have no undefined fields", function (done) {
      this.timeout(10000);
      var callbacksVisited = 0;
      // @test-end()
      {% if is_example %}
      // @example-request({{service.name}}.{{method.name}})
      {% endif %}
      dotdashpay.{{service.name|lowercase_first_letter}}.{{method.name|lowercase_first_letter}}(args)
      {% for resp in method | get_method_options %}
        .on{{resp.name}}(function (response) {
          console.log("Received on{{resp.name}} response", JSON.stringify(response));
          {% set first = True %}
          {% for field in (resp.name | find_proto_by_name).field %}
          {% if field.name != "META" %}
          {% if first %}
          {% set first = False %}
          var {{field.name | recase}} = response.{{field.name | recase}}; // e.g. {{field.name | get_example_value_for_field}}
          {% else %}
          var {{field.name | recase}} = response.{{field.name | recase}}; // {{field.name | get_example_value_for_field}}
          {% endif %}
          // @test()
          assert.isDefined({{field.name | recase}});
          // @test-end()
          {% endif %}
          {% endfor%}
          {% if not is_example and resp.type == "COMPLETION" %}

           process.exit(0);
          {% endif %}
          // @test()
          callbacksVisited++;
          {% if resp.type == "COMPLETION" %}
          assert.equal(callbacksVisited, {{method | get_method_options | length}}, "Not all callbacks were called")
          done();
          {% endif %}
          // @test-end()
        })
      {% endfor %}
        .onError(function (errorData) {
          console.log("Error", JSON.stringify(errorData));
          {% if not is_example %}

           process.exit(0);
          {% endif %}
          // @test()
          fail(null, null, "This example should never return an error");
          // @test-end()
        });
      {% if is_example %}
      // @example-request-end()
      {% endif %}

      // @test()
    });

    it("should be able to specify an error response with the simulator", function (done) {
      this.timeout(10000);
      var testErrorMessage = "Test error message";
      var testErrorCode = 1;
      dotdashpay.simulator.setResponse("{{(method | get_method_options | first).name}}",
                                       {errorMessage: testErrorMessage,
                                        errorCode: testErrorCode},
                                       true);
      dotdashpay.{{service.name|lowercase_first_letter}}.{{method.name|lowercase_first_letter}}(args)
      {% for resp in method | get_method_options %}
        .on{{resp.name}}(function (response) {
          fail(null, null, "This example should only have an onError callback event, not {{resp.name}}");
        })
      {% endfor %}
        .onError(function (errorData) {
          assert.equal(testErrorMessage, errorData.errorMessage,
                       "Simulator error message was not returned correctly");
          assert.equal(testErrorCode, errorData.errorCode,
                       "Simulator error code was not returned correctly");
          dotdashpay.simulator.resetAllResponses();
          done();
        });
    });

    it("should be able to specify a particular response from the simulator", function(done) {
      this.timeout(10000);
      // need a string value that we can overwrite
      {% set final_cb_name = (method | get_method_options | last).name %}
      var newVals = {
        {% for field in ( final_cb_name | find_response_args_proto_by_response_name).field %}
        {# 9 is the protobuf string type #}
        {# 3 is the label type for arrays #}
        {% if field.type == 9 and field.label != 3 %}
        {{field.name | recase}}: {{field.name | get_example_value_for_field}} + "-changed",
        {% endif %}
        {% endfor %}
      };

      dotdashpay.simulator.setResponse("{{ (method | get_method_options | last).name }}", newVals);

      dotdashpay.{{service.name|lowercase_first_letter}}.{{method.name|lowercase_first_letter}}(args)
        .on{{final_cb_name}}(function(response) {
          _.each(newVals, function(val, key) {
            assert.deepEqual(response[key], val);
          });
          done();
        });
    });

    it("should throw an error when a field is input that does not exist", function() {
      var errRegexp = new RegExp("does not accept an argument with name");
      try {
        dotdashpay.{{service.name|lowercase_first_letter}}.{{method.name|lowercase_first_letter}}({nonExistantFieldNameYEah: 5})
      } catch (err) {
        assert.isTrue(errRegexp.test(String(err)));
        return
      }
      throw new Error("Did not throw an error when rpc '{{method.name|lowercase_first_letter}}' called with non existant field");
    });
  });
});
// @test-end()
{%- endmacro %}




/**
   Autogenerated example for API request: {{method.name}}
**/


// @test()
var _ = require("lodash");
var assert = require('chai').assert;
var dotdashpay = require("..");
var fail = assert.fail;
// @test-end()

// @reference()
// @standalone(try_api_short)
var dotdashpay = require("dotdashpay");
dotdashpay.setup({
  simulate: true,
  apiToken: "@api-token()"
});

dotdashpay.payment.receivePaymentDataThenSettle({cents: 100})
  .onSettled(function (response) {
    console.log("Settlement finished! Transaction id: " + response.settleId);
    process.exit(0);
  })
  .onError(function (errorData) {
    console.error("Unexpected error while processing receivePaymentDataThenSettle: " + errorData);
    process.exit(0);
  });
// @standalone-end()
// @reference-end()

// @reference()
// @example-args(Setup.Setup)
var args = {
  apiToken: "api-key",
  simulate: true,
  processorSandboxMode: true
};

// @example-args-end()
// @example-request(Setup.Setup)
dotdashpay.setup(args);
// @example-request-end()
// @reference-end()

{% if method.name == "ReceivePaymentDataThenSettle" %}
// @reference()
// @standalone(try_api_expanded)
var dotdashpay = require("dotdashpay");
dotdashpay.setup({
  simulate: true,
  apiToken: "@api-token()"
});

{{render(is_example=False)}}
// @standalone-end()
// @reference-end()
{% endif %}

{{render()}}
