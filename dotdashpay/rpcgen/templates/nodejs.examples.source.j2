{# This macro avoids having to repeat code for the standalone extended example #}

{% macro render(is_example=True) -%}
{% if is_example %}
// @example-args({{service.name}}.{{method.name}})
{% endif %}
var args = {
    {% for field in (method.name | find_arguments_proto_by_method_name).field %}
    {% if field.name != "META" %}
    {{field.name | recase}}: {{field.name | get_example_value_for_field}},
    {% endif %}
    {% endfor %}
};
{% if is_example %}
// @example-args-end()
{% endif %}

// @test()
describe("{{service.name}}", function() {
    describe("{{method.name|lowercase_first_letter}}", function () {
        it("should have no undefined fields", function (done) {
            this.timeout(10000);
            var callbacksVisited = 0;
            // @test-end()
            {% if is_example %}
            // @example-request({{service.name}}.{{method.name}})
            {% endif %}
            dotdashpay.{{service.name|lowercase_first_letter}}.{{method.name|lowercase_first_letter}}(args)
            {% for resp in method | get_method_options %}
                .on{{resp.name}}(function (response) {
                    {% for field in (resp.name | find_proto_by_name).field %}
                    {% if field.name != "META" %}
                    var {{field.name | recase}} = response.{{field.name | recase}}; // {{field.name | recase}} = {{field.name | get_example_value_for_field}}
                    // @test()
                    assert.isDefined({{field.name | recase}});
                    // @test-end()
                    {% endif %}
                    {% endfor%}
                    // @test()
                    callbacksVisited++;
                    {% if resp.type == "COMPLETION" %}
                    assert.equal(callbacksVisited, {{method | get_method_options | length}}, "Not all callbacks were called")
                    setTimeout(done, 500); // let the logging complete
                    {% endif %}
                    // @test-end()
                })
            {% endfor %}
                .onError(function (errorData) {
                    if (errorData.errorCode == "") {
                        console.log("Error: " + errorData.errorMessage);
                    }
                    // @test()
                    fail(null, null, "This example should never return an error");
                    // @test-end()
                });
            {% if is_example %}
            // @example-request-end()
            {% endif %}
            // @test()
        });
    });
});
// @test-end()
{%- endmacro %}




/**
   Autogenerated example for API request: {{method.name}}
**/


// @test()
var _ = require("lodash");
var assert = require('chai').assert;
var dotdashpay = require("../lib");
var fail = require('chai').fail;

dotdashpay.init({simulate: true});
// @test-end()

// @example()
// @single(lib-setup())
var dotdashpay = require("dotdashpay");
dotdashpay.init({simulate: true});
// @single-end()
// @example-end()

// @reference()
// @single(standalone(try_api_short))
dotdashpay.payment.receivePaymentDataThenSettle({cents: 100})
    .onError(function (errorData) {
        console.error("Unexpected error while processing receivePaymentDataThenSettle: " + errorData);
    })
    .onSettled(function (response) {
        console.log("Settlement finished! Transaction id: " + response.settle_id);
    });
// @single-end()
// @reference-end()

{% if method.name == "ReceivePaymentDataThenSettle" %}
// @reference()
// @standalone(try_api_expanded)
var dotdashpay = require("dotdashpay");
dotdashpay.init({simulate: true});

{{render(is_example=False)}}
// @standalone-end()
// @reference-end()
{% endif %}

{{render()}}
