//
//  Automatically generated from {{service.name}}.proto
//  DO NOT EDIT THIS FILE DIRECTLY.
//

#import "{{generator.class_prefix()}}{{service.name}}.h"

#import "DotDashPayAPI.h"
#import "DDPBridge.h"
#import "DDPLogging.h"
#import "DDPSerialProtocol.h"
#import "DDPSignalManager.h"

{% for dep in (service.name | service_file).dependency %}
#import "{{generator.import_from_proto_file(dep)}}"
{% endfor %}

@implementation {{generator.class_prefix()}}{{service.name}}

{% for method in service.method %}
- (void) {{method.name | recase}}:({{generator.class_prefix()}}{{(method.name | find_arguments_proto_by_method_name).name}}*) args
onError:(void(^)(DDPErrorResponse*)) callbackError
{% for resp in (method | option_values("update_response")) %}
on{{resp | remove_package}}:(void(^)({{generator.class_prefix()}}{{resp | remove_package}}*)) callback{{resp | remove_package}}
{% endfor %}
on{{method | option_values("completion_response") | remove_package}}:(void(^)({{generator.class_prefix()}}{{method | option_values("completion_response") | remove_package}}*)) callback{{method | option_values("completion_response") | remove_package}} {

  [DDPSignalManager clear:@"{{method.name}}Error"];
  {% for resp in (method | option_values("update_response")) %}
  [DDPSignalManager clear:@"{{resp | remove_package}}"];
  {% endfor %}
  [DDPSignalManager clear:@"{{method | option_values('completion_response') | remove_package}}"];

  [[DDPBridge getInstance] sendRequest:@"{{method.name}}" messageId:DDPMessageId_{{method.name}}Args withArgs:args completionBlock:^(BOOL sent) {
      VLOG(2, @"{{generator.class_prefix()}}{{service.name}}::{{method.name}}: %d", sent);
      if (!sent && callbackError != nil) {
        DDPErrorResponse* error = [[DDPErrorResponse alloc] init];
        error.errorCode = DDPErrorCode_PlatformNoResp;
        error.errorMessage = @"The request was not acknowledged. Please check the connection between this machine and the DotDashPay module.";
        callbackError(error);
      } else {
        if (callbackError != nil) {
          [DDPSignalManager on:@"{{method.name}}Error" performCallback:callbackError];
        }

        {% for resp in (method | option_values("update_response")) %}
        if (callback{{resp | remove_package}} != nil) {
          [DDPSignalManager on:@"{{resp | remove_package}}" performCallback:callback{{resp | remove_package}}];
        }

        {% endfor %}
        [DDPSignalManager on:@"{{method | option_values('completion_response') | remove_package}}"
             performCallback:callback{{method | option_values('completion_response') | remove_package}}];
      }
    }];
}

{% if (method | option_values("update_response") | length) != 0 %}
- (void) {{method.name | recase}}:({{generator.class_prefix()}}{{(method.name | find_arguments_proto_by_method_name).name}}*) args
onError:(void(^)(DDPErrorResponse*)) callbackError
on{{method | option_values("completion_response") | remove_package}}:(void(^)({{generator.class_prefix()}}{{method | option_values("completion_response") | remove_package}}*)) callback{{method | option_values("completion_response") | remove_package}} {
[self {{method.name | recase}}:({{generator.class_prefix()}}{{(method.name | find_arguments_proto_by_method_name).name}}*) args
onError:callbackError
{% for resp in (method | option_values("update_response")) %}
on{{resp | remove_package}}:nil
{% endfor %}
on{{method | option_values("completion_response") | remove_package}}:callback{{method | option_values("completion_response") | remove_package}}];
}
{% endif %}

{% endfor %}

@end
