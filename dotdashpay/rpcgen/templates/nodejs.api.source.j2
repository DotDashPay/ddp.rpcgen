/**
THIS FILE IS AUTOGENERATED: CHANGES WILL BE OVERWRITTEN

{{ name|lower }}.js contains the public API for calling {{ name|lower }}-related requests.
**/

var server = require("../server");

{% for method in service.method %}
module.exports.{{method.name | lowercase_first_letter}} = function {{method.name | lowercase_first_letter}}({{method.input_type | remove_package | lowercase_first_letter}}) {
    var request = new {{method.name}}Request({{method.input_type | remove_package | lowercase_first_letter}});
    server.sendRequest(request);
    return request;
};

{% endfor %}


/**********************************
    Request Object Definitions
***********************************/

var _ = require("lodash");
var protobufTools = require("../util/protobuf-tools");
var Signal = require("signals");

{% for method in service.method %}
/**
   {{method.name}}Request is a constructor for setting up the necessary
   callback events and data in order to handle requests and response
   appropriately for the associated RPC: {{method.name}}Request
**/
var {{method.name}}Request = function {{method.name}}Request(requestDataArgs) {
  var thisReq = this;

  // Setup the request response signals to handle events
  thisReq._signals = {};
{% for resp in method | get_method_options %}
  thisReq._signals.{{ resp.name }} = new Signal();
{% endfor %}
  thisReq._signals.ErrorResponse = new Signal();

  thisReq._protobuf = protobufTools.getProtobuf("{{method.name}}Args");
  thisReq._protobuf.META = thisReq._protobuf.META || {};
  var thisProtobuf = thisReq._protobuf;
  if (requestDataArgs) {
      _.each(requestDataArgs, function (val, key) {
          if (thisProtobuf[key] === undefined) {
             throw new Error("Request '{{ method.name|lowercase_first_letter }}' does not accept an argument with name '" + key + "'");
          }

          thisProtobuf[key] = val;
      });
  }

  // Set helper data for the protobuf
  thisProtobuf._protoName = "{{method.name}}Args";
  thisProtobuf._rpcName = "{{method.name}}";

 return thisReq;
};

{% for resp in method | get_method_options %}
/**
   {{ resp.name }} is a {{ resp.type }} event
**/
{{method.name}}Request.prototype.on{{ resp.name }} =
  function on{{ resp.name }}(callbackFunction) {
    var thisReq = this;
    // TODO(cjrd) should the default be a permanent cb or "once" cb?
    thisReq._signals.{{ resp.name }}.add(callbackFunction);
    return thisReq;
  };

{% endfor %}
/**
  onError is a COMPLETION event
**/
{{method.name}}Request.prototype.onError =
  function onError(callbackFunction) {
    var thisReq = this;
    thisReq._signals.ErrorResponse.add(callbackFunction);
    return thisReq;
  };

{% endfor %}
