/**
    DO NOT EDIT: This file was autogenerated.
**/

var _ = require("lodash");
var protobufTools = require("../util/protobuf-tools");
var Signal = require("signals");

/**
   {{ rpc_name }}Request is a constructor for setting up the necessary
   callback events and data in order to handle requests and response
   appropriately for the associated RPC: {{ rpc_name }}Request
**/
var {{ rpc_name }}Request = function {{ rpc_name }}Request(requestDataArgs) {
  var thisReq = this;

  // Setup the request response signals to handle events
  thisReq._signals = {};
{% for resp in responses %}
  thisReq._signals.{{ resp.name }} = new Signal();
{% endfor %}
  thisReq._signals.ErrorResponse = new Signal();

  thisReq._protobuf = protobufTools.getProtobuf("{{ rpc_name }}Args");
  thisReq._protobuf.META = thisReq._protobuf.META || {};
  var thisProtobuf = thisReq._protobuf;
  if (requestDataArgs) {
      _.each(requestDataArgs, function (val, key) {
          thisProtobuf[key] = val;
      });
  }

  // Set helper data for the protobuf
  thisProtobuf._protoName = "{{ rpc_name }}Args";
  thisProtobuf._rpcName = "{{ rpc_name }}";

 return thisReq;
};


{% for resp in responses %}
/**
   {{ resp.name }} is a {{ resp.type }} event
**/
{{ rpc_name }}Request.prototype.on{{ resp.name }} =
  function on{{ resp.name }}(callbackFunction) {
    var thisReq = this;
    // TODO(cjrd) should the default be a permanent cb or "once" cb?
    thisReq._signals.{{ resp.name }}.add(callbackFunction);
    return thisReq;
  };

{% endfor %}
/**
  onError is a COMPLETION event
**/
{{ rpc_name }}Request.prototype.onError =
  function onError(callbackFunction) {
    var thisReq = this;
    thisReq._signals.ErrorResponse.add(callbackFunction);
    return thisReq;
  };

module.exports = {{ rpc_name }}Request;
