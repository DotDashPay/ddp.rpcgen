/**
   This file borrows heavily from the grpc library. The LICENSE for
   that library is included because of the high degree of similarity:
   
   Copyright 2015, Google Inc.
   All rights reserved.
   
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are
   met:
   
   * Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above
   copyright notice, this list of conditions and the following disclaimer
   in the documentation and/or other materials provided with the
   distribution.
   * Neither the name of Google Inc. nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
   
   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/

#include "objc_generator.h"

#include <dotdashpay/api/common/protobuf/api_common.pb.h>
#include <google/protobuf/compiler/objectivec/objectivec_helpers.h>
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/io/printer.h>
#include <google/protobuf/io/zero_copy_stream_impl.h>
#include <map>
#include <sstream>
#include <string>

using ::google::protobuf::compiler::objectivec::ClassName;
using std::map;
using std::string;

namespace ddprpc_objc_generator {
namespace {

template <class T>
string as_string(T x) {
  std::ostringstream out;
  out << x;
  return out.str();
}

string FilenameIdentifier(const string &filename) {
  string result;
  for (unsigned i = 0; i < filename.size(); i++) {
    char c = filename[i];
    if (isalnum(c)) {
      result.push_back(c);
    } else {
      static char hex[] = "0123456789abcdef";
      result.push_back('_');
      result.push_back(hex[(c >> 4) & 0xf]);
      result.push_back(hex[c & 0xf]);
    }
  }
  return result;
}
}  // namespace

string GetHeaderPrologue(const google::protobuf::FileDescriptor *file,
                         const Parameters &params) {
  string output;
  {
    // Scope the output stream so it closes and finalizes output to the string.
    google::protobuf::io::StringOutputStream output_stream(&output);
    google::protobuf::io::Printer printer(&output_stream, '$');
    map<string, string> vars;

    vars["filename"] = file->name();
    vars["filename_identifier"] = FilenameIdentifier(file->name());
    vars["filename_base"] = ddprpc_generator::StripProto(file->name());

    vars["major_version"] = std::to_string(file->options().GetExtension(dotdashpay::api::common::api_major_version));
    vars["minor_version"] = std::to_string(file->options().GetExtension(dotdashpay::api::common::api_minor_version));
    
    printer.Print(vars, "// Generated by the ddpRPC protobuf plugin.\n");
    printer.Print(vars, "// If you make any local change, they will be lost.\n");
    printer.Print(vars, "// source: $filename$\n");
    printer.Print(vars, "\n");
    printer.Print(vars, "#define DDP_API_MAJOR_VERSION $major_version$\n");
    printer.Print(vars, "#define DDP_API_MINOR_VERSION $minor_version$\n");
    printer.Print(vars, "\n");
    printer.Print(vars, "#import <Foundation/Foundation.h>\n");
    printer.Print(vars, "\n");
  }
  return output;
}

void PrintHeaderClientMethodInterfaces(
    google::protobuf::io::Printer *printer,
    const google::protobuf::MethodDescriptor *method,
    map<string, string> *vars) {
  (*vars)["Method"] = ddprpc_generator::LowercaseFirstLetter(method->name());
  (*vars)["Request"] = ClassName(method->input_type());
  (*vars)["Response"] = ClassName(method->output_type());
  (*vars)["CompletionResponse"] = method->options().GetExtension(dotdashpay::api::common::completion_response);
  
  if (method->options().ExtensionSize(dotdashpay::api::common::update_response) > 0) {
    printer->Print(
        *vars,
        "// Responses:\n"
        "// 	Updates:\n");
    for (int i = 0; i < method->options().ExtensionSize(dotdashpay::api::common::update_response); ++i) {
      (*vars)["UpdateResponse"] = method->options().GetExtension(dotdashpay::api::common::update_response, i);
      printer->Print(*vars, "//			$UpdateResponse$\n");
    }
    printer->Print(
        *vars,
        "// 	Completion:\n"
        "//			$CompletionResponse$\n"
        "- (void) $Method$:(id)delegate onUpdate:(SEL)updateCallback onCompletion:(SEL)completionCallback;\n\n");
    printer->Print(
        *vars,
        "// Responses:\n"
        "// 	Completion:\n"
        "//			$CompletionResponse$\n"
        "- (void) $Method$:(id)delegate onCompletion:(SEL)completionCallback;\n\n");
  } else {
    printer->Print(
        *vars,
        "// Responses:\n"
        "// 	Completion:\n"
        "//			$CompletionResponse$\n"
        "- (void) $Method$:(id)delegate onCompletion:(SEL)completionCallback;\n\n");
  }
}

void PrintHeaderService(google::protobuf::io::Printer *printer,
                        const google::protobuf::ServiceDescriptor *service,
                        map<string, string> *vars) {
  (*vars)["Service"] = service->name();
  printer->Print(*vars, "@protocol $Service$Protocol <NSObject>\n\n");

  printer->Print("@required\n");
  for (int i = 0; i < service->method_count(); ++i) {
    PrintHeaderClientMethodInterfaces(printer, service->method(i), vars);
  }
}

string GetHeaderServices(const google::protobuf::FileDescriptor *file,
                         const Parameters &params) {
  string output;
  {
    // Scope the output stream so it closes and finalizes output to the string.
    google::protobuf::io::StringOutputStream output_stream(&output);
    google::protobuf::io::Printer printer(&output_stream, '$');
    map<string, string> vars;

    for (int i = 0; i < file->service_count(); ++i) {
      PrintHeaderService(&printer, file->service(i), &vars);
      printer.Print("\n");
    }
  }
  return output;
}

string GetHeaderEpilogue(const google::protobuf::FileDescriptor *file,
                               const Parameters &params) {
  string output;
  {
    // Scope the output stream so it closes and finalizes output to the string.
    google::protobuf::io::StringOutputStream output_stream(&output);
    google::protobuf::io::Printer printer(&output_stream, '$');
    printer.Print("@end");
  }
  return output;
}

}  // namespace ddprpc_objc_generator
